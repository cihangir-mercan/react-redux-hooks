{"version":3,"sources":["db.js","components/MovieList.jsx","actions/index.js","constants.js","components/MovieCard.jsx","components/MovieListPlatform.jsx","components/Search.jsx","components/Titles.jsx","components/App.jsx","reportWebVitals.js","utils/PerfAnalytics.js","serviceWorker.js","reducers/selectedTodoId.js","reducers/movies.js","reducers/index.js","index.jsx"],"names":["db","Dexie","version","stores","movies","MovieList","type","children","ref","useRef","dispatch","useDispatch","useDrop","accept","drop","item","id","which","table","update","then","payload","className","MovieCard","title","useDrag","collect","monitor","isDragging","opacity","drag","style","MovieListPlatform","useSelector","state","useEffect","toCollection","sortBy","DndProvider","backend","HTML5Backend","filter","map","key","Search","useState","movie","setMovie","addMovieInner","cb","movieToAdd","add","Object","assign","addMovie","onSubmit","e","preventDefault","placeholder","value","onChange","target","Titles","App","icon","iconSize","reportWebVitals","fcp","ttfb","getFCP","fcpEntry","getTTFB","ttfbEntry","domLoad","window","performance","timing","domContentLoadedEventEnd","navigationStart","windowLoad","domComplete","networkTimings","getEntriesByType","forEach","push","name","duration","axios","method","url","data","res","console","log","catch","err","sendPerformanceAnalytics","Boolean","location","hostname","match","selectedTodoId","movieToUpdate","find","index","indexOf","updatedMovie","slice","todo","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d38fc665.chunk.js","sourcesContent":["import Dexie from \"dexie\";\r\n\r\nconst db = new Dexie(\"ReactReduxDB\");\r\ndb.version(1).stores({ movies: \"++id\" });\r\n\r\nexport default db;\r\n","import React, {useRef} from 'react';\r\nimport \"./MovieList.css\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateMovie} from \"../actions\";\r\n\r\nconst MovieList = ({type, children}) => {\r\n    const ref = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const [, drop] = useDrop({\r\n        accept: \"card\",\r\n        drop(item) {\r\n            dispatch(updateMovie(item.id, type))\r\n        }\r\n    });\r\n    drop(ref);\r\n    return <div ref={ref} className={\"list \" + type + \"-list\"}>\r\n        {children}\r\n    </div>;\r\n};\r\n\r\n\r\nexport default MovieList;","import {\r\n    LOAD_MOVIES,\r\n    ADD_MOVIE,\r\n    UPDATE_MOVIE,\r\n    DELETE_MOVIE,\r\n    SET_SELECTED_MOVIE_ID\r\n} from \"../constants\";\r\nimport db from \"../db\";\r\n\r\nexport const setSelectedMovieId = id => ({\r\n    type: SET_SELECTED_MOVIE_ID,\r\n    id\r\n});\r\n\r\nexport const loadMovies = () => {\r\n    return dispatch => {\r\n        db.table(\"movies\")\r\n            .toCollection()\r\n            .sortBy(\"id\")\r\n            .then(movies => {\r\n                dispatch({\r\n                    type: LOAD_MOVIES,\r\n                    payload: movies\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\nexport const addMovie = (title, cb) => {\r\n    return dispatch => {\r\n        const movieToAdd = {title, which: 'watch'};\r\n        db.table(\"movies\")\r\n            .add(movieToAdd)\r\n            .then(id => {\r\n                dispatch({\r\n                    type: ADD_MOVIE,\r\n                    payload: Object.assign({}, movieToAdd, {id})\r\n                });\r\n                cb();\r\n            });\r\n    };\r\n};\r\n\r\nexport const updateMovie = (id, which) => {\r\n    return dispatch => {\r\n        db.table(\"movies\")\r\n            .update(id, { which })\r\n            .then(() => {\r\n                dispatch({\r\n                    type: UPDATE_MOVIE,\r\n                    payload: { id, which }\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\nexport const deleteMovie = (id) => {\r\n    // todo\r\n    console.log(DELETE_MOVIE)\r\n};","export const ADD_MOVIE = \"ADD_MOVIE\";\r\nexport const UPDATE_MOVIE = \"UPDATE_MOVIE\";\r\nexport const DELETE_MOVIE = \"DELETE_MOVIE\";\r\nexport const LOAD_MOVIES = \"LOAD_MOVIES\";\r\nexport const SET_SELECTED_MOVIE_ID = \"SET_SELECTED_MOVIE_ID\";\r\n","import React, {useRef} from 'react';\r\nimport \"./MovieCard.css\";\r\nimport {useDrag} from \"react-dnd\";\r\n\r\nconst MovieCard = ({id, title}) => {\r\n    const ref = useRef(null);\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {type: \"card\", id},\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        })\r\n    });\r\n    const opacity = isDragging ? 0 : 1;\r\n    drag(ref);\r\n    return (\r\n        <div ref={ref} style={{opacity}} className=\"bp3-card bp3-interactive bp3-elevation-0 card\">\r\n            <h5 className=\"bp3-heading\">   {title}</h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieCard;\r\n","import React, {useEffect} from \"react\";\r\nimport {DndProvider} from \"react-dnd\";\r\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\r\nimport MovieList from \"./MovieList\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loadMovies} from \"../actions\";\r\nimport './MovieListPlatform.css';\r\n\r\nconst MovieListPlatform = () => {\r\n    const movies = useSelector(state => state.movies) || [];\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadMovies())\r\n    }, [dispatch])\r\n\r\n    return (\r\n\r\n        <DndProvider backend={HTML5Backend}>\r\n            <section className=\"list-container\">\r\n                <MovieList type=\"watch\">\r\n                    {movies\r\n                        .filter(item => item.which === 'watch')\r\n                        .map(item => (\r\n                            <MovieCard key={item.id} id={item.id} title={item.title}/>\r\n                        ))}\r\n                </MovieList>\r\n\r\n                <MovieList type=\"fav\">\r\n                    {movies\r\n                        .filter(item => item.which === 'fav')\r\n                        .map(item => (\r\n                            <MovieCard key={item.id} id={item.id} title={item.title}/>\r\n                        ))}\r\n                </MovieList>\r\n            </section>\r\n        </DndProvider>\r\n    );\r\n};\r\n\r\nexport default MovieListPlatform;","import React, {useState} from 'react';\r\nimport \"./Search.css\";\r\nimport {addMovie} from \"../actions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Search = () => {\r\n    const [movie, setMovie] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    const addMovieInner = (movie, cb) => dispatch(addMovie(movie, cb));\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addMovieInner(movie, () => {\r\n            setMovie(\"\");\r\n        });\r\n    }\r\n\r\n    return <div className=\"search-container\">\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"bp3-input-group bp3-large \">\r\n                <span className=\"bp3-icon bp3-icon-plus\"/>\r\n                <input\r\n                    className=\"bp3-input\"\r\n                    placeholder=\"Add Movie to Watch List\"\r\n                    value={movie}\r\n                    onChange={e => setMovie(e.target.value)} />\r\n            </div>\r\n        </form>\r\n    </div>\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport \"./Titles.css\";\r\n\r\nconst Titles = () => {\r\n\r\n    return (\r\n        <div className=\"titles-container\">\r\n            <div className=\"bp3-heading\">Watch List</div>\r\n            <div className=\"bp3-heading\">Fav List</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\nimport {Icon} from \"@blueprintjs/core\";\r\nimport './App.css';\r\nimport \"./MovieList.css\";\r\nimport \"./MovieCard.css\";\r\nimport MovieListPlatform from \"./MovieListPlatform\";\r\nimport Search from \"./Search\";\r\nimport Titles from \"./Titles\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"header\">\r\n                <Search/>\r\n                <Titles />\r\n            </div>\r\n\r\n            <div className=\"main\">\r\n                <MovieListPlatform/>\r\n            </div>\r\n\r\n            <div className=\"footer\">\r\n                <Icon icon=\"trash\" iconSize={80}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {sendPerformanceAnalytics} from \"./utils/PerfAnalytics\";\r\n\r\nconst reportWebVitals = () => {\r\n    sendPerformanceAnalytics();\r\n};\r\n\r\nexport default reportWebVitals;","import {getFCP, getTTFB} from \"web-vitals\";\r\nimport axios from \"axios\";\r\n\r\nexport function sendPerformanceAnalytics() {\r\n    let fcp;\r\n    let ttfb;\r\n    getFCP((fcpEntry) => {\r\n        fcp = fcpEntry.value;\r\n        getTTFB((ttfbEntry) => {\r\n            ttfb = ttfbEntry.value;\r\n\r\n            const domLoad = window.performance.timing.domContentLoadedEventEnd - window.performance.timing.navigationStart;\r\n            const windowLoad = window.performance.timing.domComplete - window.performance.timing.navigationStart;\r\n\r\n            let networkTimings = [];\r\n            window.performance.getEntriesByType('resource').forEach((item) => {\r\n                networkTimings.push({\r\n                    name: item.name,\r\n                    duration: item.duration\r\n                })\r\n            })\r\n\r\n            // Send a POST request\r\n            const API_URL = \"https://perfanalytics-backend.herokuapp.com/analytics\";\r\n            axios({\r\n                method: 'post',\r\n                url: API_URL,\r\n                data: {\r\n                    \"ttfb\": ttfb,\r\n                    \"fcp\": fcp,\r\n                    \"domLoad\": domLoad,\r\n                    \"windowLoad\": windowLoad,\r\n                    \"networkTimings\": networkTimings\r\n                }\r\n            }).then((res) => {\r\n                console.log(\"performance analytics are send to the api\")\r\n            }).catch((err) => {\r\n                console.log(\"error while sending performance analytics to the api\")\r\n            });\r\n        })\r\n    })\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SET_SELECTED_MOVIE_ID } from \"../constants\";\r\n\r\nconst selectedTodoId = (state = 0, { type, id }) => {\r\n    switch (type) {\r\n        case SET_SELECTED_MOVIE_ID:\r\n            return id;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default selectedTodoId;\r\n","import {LOAD_MOVIES, UPDATE_MOVIE, ADD_MOVIE, DELETE_MOVIE} from \"../constants\";\r\n\r\nconst movies = (state = [], {type, payload}) => {\r\n    switch (type) {\r\n        case LOAD_MOVIES:\r\n            return payload;\r\n        case ADD_MOVIE:\r\n            return [...state, payload];\r\n        case UPDATE_MOVIE: {\r\n            const movieToUpdate = state.find(movie => movie.id === payload.id);\r\n            const index = state.indexOf(movieToUpdate);\r\n            const updatedMovie = Object.assign({}, movieToUpdate, {which: payload.which});\r\n            return [\r\n                ...state.slice(0, index),\r\n                ...state.slice(index + 1),\r\n                updatedMovie\r\n            ]\r\n        }\r\n        case DELETE_MOVIE:\r\n            return state.filter(todo => todo.id !== payload);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default movies;\r\n","import {combineReducers} from \"redux\";\r\n\r\nimport selectedTodoId from \"./selectedTodoId\";\r\nimport movies from \"./movies\";\r\n\r\nexport default combineReducers({\r\n    movies,\r\n    selectedTodoId\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { Provider } from \"react-redux\";\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\r\nimport '@blueprintjs/core/lib/css/blueprint.css';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// self executing function here\r\n(function() {\r\n    // your page initialization code here\r\n    // the DOM will be available here\r\n    reportWebVitals();\r\n})();\r\n\r\n"],"sourceRoot":""}