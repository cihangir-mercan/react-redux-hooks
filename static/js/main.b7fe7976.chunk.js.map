{"version":3,"sources":["db.js","components/MovieList.jsx","actions/index.js","constants.js","components/MovieCard.jsx","components/MovieListPlatform.jsx","components/Search.jsx","components/Titles.jsx","components/App.jsx","serviceWorker.js","reducers/selectedTodoId.js","reducers/movies.js","reducers/index.js","index.jsx"],"names":["db","Dexie","version","stores","movies","MovieList","type","children","ref","useRef","dispatch","useDispatch","useDrop","accept","drop","item","id","which","table","update","then","payload","className","MovieCard","title","useDrag","collect","monitor","isDragging","opacity","drag","style","MovieListPlatform","useSelector","state","useEffect","toCollection","sortBy","console","log","DndProvider","backend","HTML5Backend","filter","map","key","Search","useState","movie","setMovie","addMovieInner","cb","movieToAdd","add","Object","assign","addMovie","onSubmit","e","preventDefault","placeholder","value","onChange","target","Titles","App","icon","iconSize","Boolean","window","location","hostname","match","selectedTodoId","movieToUpdate","find","index","indexOf","updatedMovie","slice","todo","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7fe7976.chunk.js","sourcesContent":["import Dexie from \"dexie\";\r\n\r\nconst db = new Dexie(\"ReactReduxDB\");\r\ndb.version(1).stores({ movies: \"++id\" });\r\n\r\nexport default db;\r\n","import React, {useRef} from 'react';\r\nimport \"./MovieList.css\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateMovie} from \"../actions\";\r\n\r\nconst MovieList = ({type, children}) => {\r\n    const ref = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const [, drop] = useDrop({\r\n        accept: \"card\",\r\n        drop(item) {\r\n            dispatch(updateMovie(item.id, type))\r\n        }\r\n    });\r\n    drop(ref);\r\n    return <div ref={ref} className={\"list \" + type + \"-list\"}>\r\n        {children}\r\n    </div>;\r\n};\r\n\r\n\r\nexport default MovieList;","import {\r\n    LOAD_MOVIES,\r\n    ADD_MOVIE,\r\n    UPDATE_MOVIE,\r\n    DELETE_MOVIE,\r\n    SET_SELECTED_MOVIE_ID\r\n} from \"../constants\";\r\nimport db from \"../db\";\r\n\r\nexport const setSelectedMovieId = id => ({\r\n    type: SET_SELECTED_MOVIE_ID,\r\n    id\r\n});\r\n\r\nexport const loadMovies = () => {\r\n    return dispatch => {\r\n        db.table(\"movies\")\r\n            .toCollection()\r\n            .sortBy(\"id\")\r\n            .then(movies => {\r\n                dispatch({\r\n                    type: LOAD_MOVIES,\r\n                    payload: movies\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\nexport const addMovie = (title, cb) => {\r\n    return dispatch => {\r\n        const movieToAdd = {title, which: 'watch'};\r\n        console.log('test')\r\n        db.table(\"movies\")\r\n            .add(movieToAdd)\r\n            .then(id => {\r\n                dispatch({\r\n                    type: ADD_MOVIE,\r\n                    payload: Object.assign({}, movieToAdd, {id})\r\n                });\r\n                cb();\r\n            });\r\n    };\r\n};\r\n\r\nexport const updateMovie = (id, which) => {\r\n    return dispatch => {\r\n        db.table(\"movies\")\r\n            .update(id, { which })\r\n            .then(() => {\r\n                dispatch({\r\n                    type: UPDATE_MOVIE,\r\n                    payload: { id, which }\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\nexport const deleteMovie = (id) => {\r\n    // todo\r\n    console.log(DELETE_MOVIE)\r\n};","export const ADD_MOVIE = \"ADD_MOVIE\";\r\nexport const UPDATE_MOVIE = \"UPDATE_MOVIE\";\r\nexport const DELETE_MOVIE = \"DELETE_MOVIE\";\r\nexport const LOAD_MOVIES = \"LOAD_MOVIES\";\r\nexport const SET_SELECTED_MOVIE_ID = \"SET_SELECTED_MOVIE_ID\";\r\n","import React, {useRef} from 'react';\r\nimport \"./MovieCard.css\";\r\nimport {useDrag} from \"react-dnd\";\r\n\r\nconst MovieCard = ({id, title}) => {\r\n    const ref = useRef(null);\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {type: \"card\", id},\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        })\r\n    });\r\n    const opacity = isDragging ? 0 : 1;\r\n    drag(ref);\r\n    return (\r\n        <div ref={ref} style={{opacity}} className=\"bp3-card bp3-interactive bp3-elevation-0 card\">\r\n            <h5 className=\"bp3-heading\">   {title}</h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieCard;\r\n","import React, {useEffect} from \"react\";\r\nimport {DndProvider} from \"react-dnd\";\r\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\r\nimport MovieList from \"./MovieList\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loadMovies} from \"../actions\";\r\nimport './MovieListPlatform.css';\r\n\r\nconst MovieListPlatform = () => {\r\n    const movies = useSelector(state => state.movies) || [];\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadMovies())\r\n    }, [dispatch])\r\n\r\n    console.log('rendered', movies);\r\n\r\n    return (\r\n\r\n        <DndProvider backend={HTML5Backend}>\r\n            <section className=\"list-container\">\r\n                <MovieList type=\"watch\">\r\n                    {movies\r\n                        .filter(item => item.which === 'watch')\r\n                        .map(item => (\r\n                            <MovieCard key={item.id} id={item.id} title={item.title}/>\r\n                        ))}\r\n                </MovieList>\r\n\r\n                <MovieList type=\"fav\">\r\n                    {movies\r\n                        .filter(item => item.which === 'fav')\r\n                        .map(item => (\r\n                            <MovieCard key={item.id} id={item.id} title={item.title}/>\r\n                        ))}\r\n                </MovieList>\r\n            </section>\r\n        </DndProvider>\r\n    );\r\n};\r\n\r\nexport default MovieListPlatform;","import React, {useState} from 'react';\r\nimport \"./Search.css\";\r\nimport {addMovie} from \"../actions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Search = () => {\r\n    const [movie, setMovie] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    const addMovieInner = (movie, cb) => dispatch(addMovie(movie, cb));\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addMovieInner(movie, () => {\r\n            setMovie(\"\");\r\n        });\r\n    }\r\n\r\n    return <div className=\"search-container\">\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"bp3-input-group bp3-large \">\r\n                <span className=\"bp3-icon bp3-icon-plus\"/>\r\n                <input\r\n                    className=\"bp3-input\"\r\n                    placeholder=\"Add Movie to Watch List\"\r\n                    value={movie}\r\n                    onChange={e => setMovie(e.target.value)} />\r\n            </div>\r\n        </form>\r\n    </div>\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport \"./Titles.css\";\r\n\r\nconst Titles = () => {\r\n\r\n    return (\r\n        <div className=\"titles-container\">\r\n            <div className=\"bp3-heading\">Watch List</div>\r\n            <div className=\"bp3-heading\">Fav List</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\nimport {Icon} from \"@blueprintjs/core\";\r\nimport './App.css';\r\nimport \"./MovieList.css\";\r\nimport \"./MovieCard.css\";\r\nimport MovieListPlatform from \"./MovieListPlatform\";\r\nimport Search from \"./Search\";\r\nimport Titles from \"./Titles\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"header\">\r\n               <Search/>\r\n                <Titles />\r\n            </div>\r\n\r\n            <div className=\"main\">\r\n                <MovieListPlatform/>\r\n            </div>\r\n\r\n            <div className=\"footer\">\r\n                <Icon icon=\"trash\" iconSize={80}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_SELECTED_MOVIE_ID } from \"../constants\";\r\n\r\nconst selectedTodoId = (state = 0, { type, id }) => {\r\n    switch (type) {\r\n        case SET_SELECTED_MOVIE_ID:\r\n            return id;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default selectedTodoId;\r\n","import {LOAD_MOVIES, UPDATE_MOVIE, ADD_MOVIE, DELETE_MOVIE} from \"../constants\";\r\n\r\nconst movies = (state = [], {type, payload}) => {\r\n    switch (type) {\r\n        case LOAD_MOVIES:\r\n            return payload;\r\n        case ADD_MOVIE:\r\n            return [...state, payload];\r\n        case UPDATE_MOVIE: {\r\n            const movieToUpdate = state.find(movie => movie.id === payload.id);\r\n            const index = state.indexOf(movieToUpdate);\r\n            const updatedMovie = Object.assign({}, movieToUpdate, {which: payload.which});\r\n            return [\r\n                ...state.slice(0, index),\r\n                ...state.slice(index + 1),\r\n                updatedMovie\r\n            ]\r\n        }\r\n        case DELETE_MOVIE:\r\n            return state.filter(todo => todo.id !== payload);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default movies;\r\n","import {combineReducers} from \"redux\";\r\n\r\nimport selectedTodoId from \"./selectedTodoId\";\r\nimport movies from \"./movies\";\r\n\r\nexport default combineReducers({\r\n    movies,\r\n    selectedTodoId\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { Provider } from \"react-redux\";\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\r\nimport '@blueprintjs/core/lib/css/blueprint.css';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}